name: Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
      has_migration: ${{ steps.has_migration.outputs.has_migration }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0
      - name: Get branch name
        id: branch_name
        uses: ./.github/actions/get-current-branch
      - name: Check for migrations
        id: has_migration
        run: |
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD | grep -q '^core/migrations/'; then
            echo "has_migration=true" >> $GITHUB_OUTPUT
          else
            echo "has_migration=false" >> $GITHUB_OUTPUT
          fi
      - name: Add migration label
        if: ${{ steps.has_migration.outputs.has_migration == 'true' }}
        run: gh issue edit ${{ github.event.pull_request.number }} --add-label "migration"
        env:
          GH_TOKEN: ${{ github.token }}

  deploy_preview:
    name: Deploy Preview
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.deploy_project.outputs.preview_url }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Use Latest Corepack
        run: |
          echo "Before: corepack version => $(corepack --version || echo 'not installed')"
          npm install -g corepack@latest
          echo "After : corepack version => $(corepack --version)"
          corepack enable
          pnpm --version

      - name: Create Neon Branch
        if: needs.setup.outputs.has_migration == 'true'
        id: create_neon_branch
        uses: neondatabase/create-branch-action@03c1d6a151ccb25d94bf8b71a25803134437d2c8
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          role: default
          database: verceldb
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
      - name: Run Migrations
        if: needs.setup.outputs.has_migration == 'true'
        run: pnpm run -F core generate && pnpm run -F core migrate
        env:
          POSTGRES_URL: '${{ steps.create_neon_branch.outputs.db_url_pooled }}'

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          POSTGRES_URL: ${{ needs.setup.outputs.has_migration == 'true' && steps.create_neon_branch.outputs.db_url || secrets.POSTGRES_URL }}
      - name: Deploy Project Artifacts to Vercel
        id: deploy_project
        run: |
          if [ "${{ needs.setup.outputs.has_migration }}" == "true" ]; then
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env POSTGRES_URL=${{ steps.create_neon_branch.outputs.db_url }} > preview-url.txt
          else
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > preview-url.txt
          fi
          echo "preview_url=$(cat preview-url.txt)" >> $GITHUB_OUTPUT

  # comment_schema_diff:
  #   name: Comment Schema Diff
  #   continue-on-error: true
  #   needs:
  #     - setup
  #     - deploy_preview
  #   if: |
  #     github.event_name == 'pull_request' && (
  #     github.event.action == 'synchronize'
  #     || github.event.action == 'opened'
  #     || github.event.action == 'reopened') && (
  #     needs.setup.outputs.has_migration == 'true')
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write
  #   steps:
  #     - name: Post Schema Diff Comment to PR
  #       uses: neondatabase/schema-diff-action@80cfa8521628e890015b60f5291a7738926617dc
  #       with:
  #         project_id: ${{ vars.NEON_PROJECT_ID }}
  #         compare_branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
  #         api_key: ${{ secrets.NEON_API_KEY }}
  #         database: verceldb

  comment_preview_url:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: deploy_preview
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    permissions:
      pull-requests: write
    steps:
      - name: Preview URL Comment to PR
        env:
          PREVIEW_URL: ${{needs.deploy_preview.outputs.preview_url}}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        id: my-script
        with:
          script: |
            const pullRequests = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })
            const issueNumber = context.issue.number || pullRequests.data[0].number

            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
            })

            const output = `Deployed at ${process.env.PREVIEW_URL}`
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output,
              })
            } else {
              github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              })
            }

  delete_neon_branch:
    name: Delete Neon Branch
    needs: setup
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      contains(github.event.pull_request.labels.*.name, 'migration')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@8094a597f668f3ad180f1515c71db347fcde812f
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
